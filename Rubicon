def func4(arg26, arg27):
    var58 = var30(arg26, arg27)
    var66 = var61(arg27, arg26)
    var89 = var69(var58, var66)
    var92 = func14(arg26, var89)
    var93 = (-511 & var66) ^ arg27 ^ arg27
    var94 = 760 + var58 & -779 - var92
    var95 = -571292553 | -251043985 | 427704483 & var66
    if var93 < var58:
        var96 = arg27 | var95 | -186302320 | var95
    else:
        var96 = arg26 & arg26
    var97 = var58 + 280647885
    var98 = arg27 | var92
    var99 = ((var89 - var98) - -1255662067) - var94
    var100 = (var66 & 205) | 889430556 + var89
    var101 = (var99 & arg26) | var100 ^ arg26
    var102 = (arg26 & var98 | var93) & var99
    var103 = (var101 + var95) ^ -1641716038
    var104 = ((var99 ^ var103) ^ -863548991) | var58
    var105 = var101 | var102
    result = var94 & var99 & arg27
    return result
def func14(arg90, arg91):
    result = arg91 | arg90
    return result
def func13(arg70, arg71):
    var72 = -2111560565 | arg70
    var73 = var72 - -731
    if var72 < arg70:
        var74 = arg71 - (arg71 - var72)
    else:
        var74 = arg71 + var73
    var75 = arg70 - arg70 + arg70 & var72
    var76 = arg71 ^ (var73 | arg71) ^ arg70
    if arg71 < arg70:
        var77 = arg71 | arg70 ^ arg70
    else:
        var77 = 545378137 | arg71 + (var73 & var73)
    var78 = 44 & var75
    var79 = (var76 & var78 - -859) + arg71
    var80 = (var75 | arg71) & var72 & var76
    var81 = arg70 | var76 | var76
    var82 = var78 + (var80 ^ var76 - var78)
    var83 = var82 & (arg71 - -105798043) + arg70
    var84 = (-29807333 | var81) | arg71 + var79
    var85 = arg71 ^ var81
    var86 = var84 ^ -1052624401
    var87 = -1144665345 - var82
    var88 = var83 & 36
    result = var87 | (var75 | -243942020) + var84 ^ var86
    return result
def func12():
    closure = [-6]
    def func11(arg67, arg68):
        closure[0] += func13(arg67, arg68)
        return closure[0]
    func = func11
    return func
var69 = func12()
def func10(arg62, arg63):
    var64 = (arg62 & -740 | -647473925 + -788 + (arg62 | (-487837405 & (((1726201936 ^ (((-996 - (arg62 & arg62)) & (arg63 + ((810635814 ^ -402) - -332918425))) - -231824600) & arg62) ^ 630545422) ^ -122))) ^ arg63 - -233 - arg63) + 962611144
    var65 = (arg63 | (var64 - -247) ^ arg63 - arg63 | (arg63 & arg63 | (var64 + (var64 - (463347725 + arg63))) + (-2040764226 & (448 & -337 + arg63 ^ var64)) - var64) & var64 + -74 + 372) - arg63 ^ -345
    result = (arg63 | (((arg62 + (arg63 & ((var64 - -1680586465) + var64 ^ arg62) | -614343402) ^ var65) ^ var65) + -390554664)) - arg63
    return result
def func9():
    closure = [-8]
    def func8(arg59, arg60):
        closure[0] += func10(arg59, arg60)
        return closure[0]
    func = func8
    return func
var61 = func9()
def func7(arg31, arg32):
    var33 = 351387623 ^ arg32 ^ -221643345
    var34 = ((arg31 ^ arg31) + arg31) - var33
    var35 = arg31 & var34
    var36 = var34 & var35
    var37 = 1759625035 - 697422216
    var38 = -583 ^ (arg31 ^ var35) | arg31
    if var38 < var35:
        var39 = arg32 + var38 - var33 ^ var37
    else:
        var39 = 716961251 | ((arg32 ^ var35) ^ arg32)
    var40 = var34 - 349263064 - var34 ^ arg32
    var41 = arg32 ^ 506
    var42 = var38 | (var40 | var34)
    var43 = (var37 | var33) & var40
    var44 = var36 ^ (var43 | var42 | 270)
    if var44 < var37:
        var45 = var44 ^ var41
    else:
        var45 = 1394077495 & var44 & 39436162 + var37
    var46 = ((var40 + var36) - var36) ^ var34
    var47 = var46 & var33
    var48 = var42 & -1812118302 - var38
    var49 = (var46 ^ (var46 & var46)) & var47
    var50 = (var44 & -1180224748 | arg32) ^ var40
    var51 = var41 & var36
    var52 = ((var48 ^ var40) ^ -265) | var50
    if var44 < var38:
        var53 = (var48 & var40 & arg31) ^ var47
    else:
        var53 = var50 & arg31
    var54 = var40 | (var38 | var35) & var35
    var55 = var44 + (-2061078268 - -566420224) + var51
    var56 = (154 & var42) ^ var38 & var43
    var57 = (var51 | var46 ^ var35) ^ var34
    result = var54 | var35 & var52
    return result
def func6():
    closure = [0]
    def func5(arg28, arg29):
        closure[0] += func7(arg28, arg29)
        return closure[0]
    func = func5
    return func
var30 = func6()
def func1(arg1, arg2):
    var6 = func2(arg2, arg1)
    var7 = var6 ^ arg2 & var6
    var8 = (arg2 | arg1) ^ var6
    var9 = (-283 ^ (var6 + arg2)) - 1569780946
    if var9 < var9:
        var10 = (var7 - var7) + (var7 | arg2)
    else:
        var10 = ((var8 + var9) - arg1) + var8
    var11 = var6 & arg1 & arg2 | arg1
    var12 = (-791 + var8 - var8) & var9
    var13 = var6 ^ 196
    var14 = var12 & arg2
    var15 = var13 & (1984166017 - (var8 - var13))
    var16 = (var8 - arg2 & var11) & var14
    var17 = -1839421670 & var11
    var18 = var9 + 716 - var16
    var19 = (var9 + -267) - var16 + var7
    var20 = ((var7 | var19) ^ var7) ^ var9
    var21 = arg2 & var20 ^ var6 | var7
    var22 = (var6 ^ -563) ^ arg1
    if arg2 < var12:
        var23 = var20 & var15 & var11 - var9
    else:
        var23 = var8 ^ var21
    var24 = var7 & var14 & var15
    var25 = var17 & var12
    result = var7 ^ var19
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = (closure[0] ^ -9 | closure[0] | (-9 ^ -2) + rest) + -9
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 1'
    print 'func_number: 4'
    print 'arg_number: 26'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 15'
    print 'arg_number: 106'
    for i in xrange(25000):
        x = 5
        x = func4(x, i)
        print x,
